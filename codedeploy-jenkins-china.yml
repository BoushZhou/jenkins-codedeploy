
Parameters:
  InstanceType:
    Description: EC2 instance type for Jenkins and CodeDeploy Web Servers
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceCount:
    Description: Number of CodeDeploy Web Server EC2 instances
    Type: Number
    Default: '2'
    ConstraintDescription: Must be a number between 2 and 4.
    MinValue: '2'
    MaxValue: '4'
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to EC2 instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: jtest
  VpcId:
    Description: The VPC Id where the EC2 instances will be launched.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be the name of an existing VPC.
    Default: '172.31.0.0/16'
    
  YourIPRange:
    Description: >-
      CIDR block of the network from where you will connect to the Jenkins
      server using HTTP and SSH
    Type: String
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1:
    Description: >-
      The first public subnet where the Jenkins EC2 instance, ELB and CodeDeploy
      Web Servers will be launched
    Type: 'AWS::EC2::Subnet::Id'
    Default: '172.31.0.0/20'
    ConstraintDescription: Must be a valid Public VPC Subnet.
  PublicSubnet2:
    Description: >-
      The second public subnet where the ELB and CodeDeploy Web Servers will be
      launched
    Type: 'AWS::EC2::Subnet::Id'
    Default: '172.31.16.0/20'
    ConstraintDescription: Must be a valid Public VPC Subnet.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-1ccae774
      HVM64: ami-1ecae776
    us-west-2:
      PV64: ami-ff527ecf
      HVM64: ami-e7527ed7
    us-west-1:
      PV64: ami-d514f291
      HVM64: ami-d114f295
    eu-west-1:
      PV64: ami-bf0897c8
      HVM64: ami-a10897d6
    eu-central-1:
      PV64: ami-ac221fb1
      HVM64: ami-a8221fb5
    ap-northeast-1:
      PV64: ami-acd9e8fe
      HVM64: ami-68d8e93a
    ap-southeast-1:
      PV64: ami-27f90e27
      HVM64: ami-cbf90ecb
    ap-southeast-2:
      PV64: ami-ff9cecc5
      HVM64: ami-fd9cecc7
    sa-east-1:
      PV64: ami-fd9925e0
      HVM64: ami-b52890a8
Resources:
  JenkinsServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      ImageId: 'ami-6b6a7d09'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref JenkinsSecurityGroup
          SubnetId: !Ref PublicSubnet1
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y
            - |
              yum install -y wget git
            - |
              wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
            - |
              rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
            - |
              yum install -y jenkins java-1.8.0-openjdk 
            - |
              systemctl start jenkins
            - |
              systemctl stop firewalld
            - |
              setenforce 0

      Tags:
        - Key: Name
          Value: Jenkins Server
  JenkinsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access from specific CIDR block
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref YourIPRange
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref YourIPRange
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref YourIPRange
  ELBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  WSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access from ELB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref YourIPRange
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSG
  CodeDeployBucket:
    Type: 'AWS::S3::Bucket'
  JenkinsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeCommitReadOnly'
        - 'arn:aws:iam::aws:policy/AWSCodeCommitPowerUser'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  JenkinsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsRole
  JenkinsCodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'sts:AssumeRole'
  STSAssumeRoleJenkinsCodeDeployRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: STSAssumeRole_JenkinsCodeDeployRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource:
              - !GetAtt 
                - JenkinsCodeDeployRole
                - Arn
      Roles:
        - !Ref JenkinsRole
  S3AllCodeDeploy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3All_CodeDeploy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CodeDeployBucket
                  - /*
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CodeDeployBucket
          - Effect: Allow
            Action:
              - 's3:GetBucketLocation'
              - 's3:ListAllMyBuckets'
            Resource: '*'
      Roles:
        - !Ref JenkinsCodeDeployRole
  CodeDeployTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodeDeployRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'ec2:Describe*'
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'autoscaling:CompleteLifecycleAction'
              - 'autoscaling:DeleteLifecycleHook'
              - 'autoscaling:DescribeLifecycleHooks'
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:PutLifecycleHook'
              - 'autoscaling:RecordLifecycleActionHeartbeat'
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'Tag:getResources'
              - 'Tag:getTags'
              - 'Tag:getTagsForResource'
              - 'Tag:getTagsForResourceList'
      Roles:
        - !Ref CodeDeployTrustRole
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  InstanceRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'autoscaling:Describe*'
              - 'cloudformation:Describe*'
              - 'cloudformation:GetTemplate'
              - 's3:Get*'
            Resource: '*'
      Roles:
        - !Ref InstanceRole
  InstanceRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  WSASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: 0
      MaxSize: 4
      DesiredCapacity: !Ref InstanceCount
      LoadBalancerNames:
        - !Ref ELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: CodeDeployDemo
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref InstanceCount
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
  WSLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      ImageId: 'ami-6b6a7d09'
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WSSG
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y aws-cli
            - |
              # Helper function.
            - |
              function error_exit
            - |
              {
            - '  /opt/aws/bin/cfn-signal -e 1 '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --reason "$1" '
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |2
                exit 1
            - |
              }
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ec2-user/
            - 'aws s3 cp ''s3://aws-codedeploy-'
            - !Ref 'AWS::Region'
            - >
              /latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to
              download AWS CodeDeploy Agent.'
            - >
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed
              to install AWS CodeDeploy Agent.' 
            - '/opt/aws/bin/cfn-init --stack '
            - !Ref 'AWS::StackId'
            - ' --resource WSLaunchConfiguration --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init.'
            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e 0 '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WSASG '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
      AssociatePublicIpAddress: true
  ELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: 'HTTP:80/'
        Timeout: '5'
        UnhealthyThreshold: '5'
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames: []
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ELBSG
  DemoApplication:
    Type: 'AWS::CodeDeploy::Application'
  DemoFleet:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref DemoApplication
      AutoScalingGroups:
        - !Ref WSASG
      Deployment:
        Description: Initial deployment
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Join 
              - ''
              - - aws-codedeploy-
                - !Ref 'AWS::Region'
            BundleType: zip
            Key: samples/latest/SampleApp_Linux.zip
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !GetAtt 
        - CodeDeployTrustRole
        - Arn
Outputs:
  ELBDNSName:
    Description: DNS Name of the ELB
    Value: !GetAtt 
      - ELB
      - DNSName
  JenkinsServerDNSName:
    Description: DNS Name of Jenkins Server
    Value: !GetAtt 
      - JenkinsServer
      - PublicDnsName
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref DemoApplication
  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref DemoFleet
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref CodeDeployBucket
  JenkinsCodeDeployRoleArn:
    Description: ARN of the JenkinsCodeDeploy Role
    Value: !GetAtt 
      - JenkinsCodeDeployRole
      - Arn
